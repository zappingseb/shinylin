{
    "collab_server" : "",
    "contents" : "#\n# This is the server logic of a Shiny web application. You can run the \n# application by clicking 'Run App' above.\n#\n# Find out more about building applications with Shiny here:\n# \n#    http://shiny.rstudio.com/\n#\n\nlibrary(shiny)\nlibrary(ggplot2)\nlibrary(lme4)\nlibrary(stringr)\nrhandson_plugin = function(input,output){\n  DF <- data.frame(Value = 1:10, Status = TRUE, Name = LETTERS[1:10],\n                   Date = seq(from = Sys.Date(), by = \"days\", length.out = 10),\n                   stringsAsFactors = FALSE)\n  \n  values <- reactiveValues()\n  \n  ## Handsontable\n  observe({\n    if (!is.null(input$hot)) {\n      DF = hot_to_r(input$hot)\n    } else {\n      if (is.null(values[[\"DF\"]]))\n        DF <- DF\n      else\n        DF <- values[[\"DF\"]]\n    }\n    values[[\"DF\"]] <- DF\n  })\n  \n  output$hot <- renderRHandsontable({\n    DF <- values[[\"DF\"]]\n    if (!is.null(DF))\n      rhandsontable(DF, useTypes = as.logical(input$useType), stretchH = \"all\")\n  })\n  \n  ## Save \n  observeEvent(input$save, {\n    finalDF <- isolate(values[[\"DF\"]])\n    saveRDS(finalDF, file=file.path(\"./data\", sprintf(\"%s.rds\", \"input_table\")))\n  })\n  \n}\n\n# Define server logic required to draw a histogram\nmy_df = function(bins){\n  #' Function to Create a data table that is exactly correllated by 1:2\n  #' @param bins (integer): Telling how many entries the data table shall have\n  #' @return out (data.frame): A dataframe with exactly two columns x and y\n  x = c(1:(1*bins))\n  y = seq(2,2*bins,2)\n  return(data.frame(x,y))\n}\n\nshinyServer(function(input, output) {\n  \n  rhandson_plugin(input,output)\n  \n  # Example for responsive UI\n  datasetInput <- reactive({\n    switch(input$dataset,\n           \"rock\" = 1,\n           \"pressure\" = 2,\n           \"cars\" = 3)\n  })\n  \n  output$nrows <- reactive({\n    nrow(datasetInput())\n  })\n  # - - END OF EXAMPLE\n  \n  response <- reactive(my_df(input$bins))\n   \n  output$distPlot <- renderPlot({\n    \n    # generate bins based on input$bins from ui.R\n    x    <- faithful[, 2] \n    bins <- seq(min(x), max(x), length.out = input$bins + 1)\n    \n    # draw the histogram with the specified number of bins\n    hist(x, breaks = bins, col = 'darkgray', border = 'white')\n    \n  })\n  \n  output$myplot <- renderPlot({\n\n    # Create a green line of the data frame\n    # created with my_df and the number of bins\n    # set in the input\n    input_file <- input$file1\n    \n    if(is.null(input_file)){\n      ggplot(data=response(),aes(x=x,y=y))+\n        geom_line(color=\"green\")\n    }else{\n      data <- read.csv(input_file$datapath,header=input$header)\n      if(all(colnames(data)==c(\"x\",\"y\"))){\n        ggplot(data=data,aes(x=x,y=y))+\n          geom_line(color=\"green\")\n      }\n    }\n\n    \n  })\n  \n  output$table <- renderTable(\n    response()\n  )\n  \n  # Rende a output table including the generation of a linear model\n  output$linreg <- renderTable({\n    input_df <- response()\n    model = lm(y ~ x,input_df)\n    out<- data.frame(model$coefficients)\n    rownames(out)<-c(\"intercept\",\"slope\")\n    out[,2]<-out[,1]\n    out[,1]<-rownames(out)\n    colnames(out)<-c(\"\",\"value\")\n    out\n  })\n  \n  # Check how Excel Input works\n  # This function can be used to copy paste an Excel table into\n  # an R data table\n  dataframe <- reactive(input$bigText)\n  \n  output$bigTextOut <- renderTable({\n    if(dataframe()!=\"\"){\n      x <- read.table(textConnection(dataframe()),header=T,sep = \"\\t\")\n    }else{\n      x<-data.frame(\"\")\n    }\n\n  })\n  \n})\n",
    "created" : 1484239392278.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1301373450",
    "id" : "404B2A8D",
    "lastKnownWriteTime" : 1484254547,
    "last_content_update" : 1484254547423,
    "path" : "~/OneDrive - bwedu/Bewerbungen/20170111_rochecase/shinyApp1/server.R",
    "project_path" : "server.R",
    "properties" : {
        "docOutlineVisible" : "0"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}